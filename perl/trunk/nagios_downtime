#!/usr/bin/perl -w
# ##############################################################################
# nagios_downtime
#
# Copyright (c) 2007-2009 Lars Michelsen <lars@vertical-visions.de>
# http://www.vertical-visions.de
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# ##############################################################################
# SCRIPT:       nagios_downtime
# AUTHOR:       Lars Michelsen <lars@vertical-visions.de>
# DECRIPTION:   Sends a HTTP(S)-GET to the nagios web server to
#	              enter a downtime for a host or service.
# CHANGES:
# 2008-05-19 v0.4 - Some code formating
#                 - The downtime type is now automaticaly detected on given params
#                 - Changed case of the parameters
#                 - Added proxy configuration options
#                 - User Agent is now "nagios_downtime.pl / <version>"
#                 - Added parameter -S and -p for setting server options via param
# 2009-10-13 v0.5 - Added new "run modes": add (default) and del to schedule
#                   or remove downtimes
#                 - Using the del mode the last scheduled downtime will be removed
#                 - Added the params -u and -P for giving the username and password
#                   for accessing the CGIs by the command line
#                 - Several code cleanups
#
# $Id$
# ##############################################################################

# ##############################################################################
# Configuration (-> Here you have to set some values!)
# ##############################################################################

# Protocol for the GET Request, In most cases "http", "https" is also possible
my $nagiosWebProto = "http";
# IP or FQDN of Nagios server (example: nagios.domain.de)
my $nagiosServer = "localhost";
# IP or FQDN of Nagios web server. In most cases same as $nagiosServer, if
# empty automaticaly using $nagiosServer
my $nagiosWebServer = "";
# Port of Nagios webserver (If $nagiosWebProto is set to https, this should be
# SSL Port 443)
my $nagiosWebPort = 80;
# Web path to Nagios cgi-bin (example: /nagios/cgi-bin) (NO trailing slash!)
my $nagiosCgiPath = "/nagios/cgi-bin";
# User to take for authentication and author to enter the downtime (example:
# nagiosadmin)
my $nagiosUser = "nagiosadmin";
# Password for above user
my $nagiosUserPw = "";
# Name of authentication realm, set in the Nagios .htaccess file 
# (example: "Nagios Access")
my $nagiosAuthName = "Nagios Access";
# Nagios date format (same like set in value "date_format" in nagios.cfg)
my $nagiosDateFormat = "us";
# When you have to use a proxy server for access to the nagios server, set the
# URL here. The proxy will be set for this script for the choosen web protocol
# When this is set to 'env', the proxy settings will be read from the env.
my $proxyAddress = '';

# Enable fetching and storing the downtime ids for later downtime removal
# The downtime IDs will be stored in a defined temp directory
my $storeDowntimeIds = 1;
# The script will generate temporary files named (<host>.txt or 
# <host>-<service>.txt). The files will contain the script internal
# downtime ids and/or the nagios downtime ids.
# These files are needed for later downtime removal
my $downtimePath = '/tmp';

# Some default options (Usualy no changes needed below this)

# Script internal downtime id for a new downtime
# Using the current timestamp as script internal downtime identifier
my $downtimeId = time;
# Default downtime type (1: Host Downtime, 2: Service Downtime)
my $downtimeType = 1;
# Default Downtime duration in minutes
my $downtimeDuration = 10;
# Default Downtime text
# The (ID:<id>) string is important for deleting the downtime later
my $downtimeComment = "Perl Downtime-Script (ID:".$downtimeId.")";
# Default Debugmode: off => 0 or on => 1
my $debug = 0;
# Script version
my $version = "0.5";

# ##############################################################################
# Don't change anything below, except you know what you are doing.
# ##############################################################################

use strict;
use warnings;
use Net::Ping;
use LWP 5.64;
use Sys::Hostname;
use Getopt::Long;
use Switch;
use DateTime;

my $arg;
my $p;
my $i = 0;
my $oBrowser;
my $oResponse;
my $hostname = "";
my $service = "";
my $start;
my $end;
my $url = "";
my $help = "";
my $now = time;
my $timezone = "local";
my $mode = "add";

Getopt::Long::Configure('bundling');
GetOptions(
	"h|help" => \$help,
	"d|debug"   => \$debug,
	"m|mode=s" => \$mode,
	"H|hostname=s" => \$hostname,
	"S|server=s" => \$nagiosServer,
	"p|path=s" => \$nagiosCgiPath,
	"u|user=s" => \$nagiosUser,
	"P|password=s" => \$nagiosUserPw,
	"t|downtime=i" => \$downtimeDuration,
	"c|comment=i" => \$downtimeComment,
	"s|service=s" => \$service);

if($help) {
	about();
	exit(0);
}

# Mode can be add or del, default is "add"
if($mode eq "") {
	$mode = "add";
}

# Get hostname if not set via param
if($hostname eq "") {
	$hostname = hostname;
}

# When no nagios webserver is set the webserver and Nagios should be on the same
# host 
if($nagiosWebServer eq "") {
	$nagiosWebServer = $nagiosServer;
}

# When a service name is set, this will be a service downtime
if($service ne "") {
	$downtimeType = 2;
}

# Calculate the start of the downtime
$start = gettime($now);
 
# Calculate the end of the downtime
$end = gettime($now+$downtimeDuration*60);
 
# Check if Nagios web server is reachable via ping, if not, terminate the script
$p = Net::Ping->new();
if(!$p->ping($nagiosWebServer)) {
	# Nagios web server is not pingable
	print "ERROR: Given Nagios web server \"" . $nagiosWebServer . "\" not reachable via ping\n";
	exit(1);
}

# Initialize the browser
$oBrowser = LWP::UserAgent->new(keep_alive => 1,timeout => 10);
$oBrowser->agent("nagios_downtime.pl / " . $version);

# Set the proxy address depending on the configured option
if($proxyAddress eq 'env') {
	$oBrowser->env_proxy = 1;
} else {
	$oBrowser->proxy([$nagiosWebProto], $proxyAddress);
}
 
# Only try to auth if auth informations are given
if($nagiosAuthName ne "" && $nagiosUserPw ne "") {
	# Set auth informations
	$oBrowser->credentials($nagiosWebServer.':'.$nagiosWebPort, $nagiosAuthName, $nagiosUser => $nagiosUserPw);
}

# Handle the given action
switch($mode) {
	case 'add' {
		# Add a new scheduled downtime
		# ##########################################################################
		
		if($downtimeType == 1) {
			# Schedule Host Downtime
			$url = $nagiosWebProto . "://" . $nagiosWebServer . ":" . $nagiosWebPort . $nagiosCgiPath . "/cmd.cgi?cmd_typ=55&cmd_mod=2" .
				"&host=" . $hostname .
				"&com_author=" . $nagiosUser . "&com_data=" . $downtimeComment .
				"&trigger=0&start_time=" . $start . "&end_time=" . $end .
				"&fixed=1&childoptions=1&btnSubmit=Commit";
	
			if($debug == 1) {
				print "HTTP-GET: " . $url;
			}
		} else {
			# Schedule Service Downtime
			$url = $nagiosWebProto . "://" . $nagiosWebServer . ":" . $nagiosWebPort . $nagiosCgiPath . "/cmd.cgi?cmd_typ=56&cmd_mod=2" .
				"&host=" . $hostname . "&service=" . $service .
				"&com_author=" . $nagiosUser . "&com_data=" . $downtimeComment .
				"&trigger=0&start_time=" . $start . "&end_time=" . $end .
				"&fixed=1&btnSubmit=Commit";
			
			if($debug == 1) {
				print "HTTP-GET: " . $url;
			}
		}
	
		# Send the get request to the web server
		$oResponse = $oBrowser->get($url);
	
		if($debug == 1) {
			print "HTTP-Response: " . $oResponse->content;
		}
	
		# Handle response code, not in detail, only first char
		switch(substr($oResponse->code,0,1)) {
			# 2xx response code is OK
			case 2 {
				# Do some basic handling with the response content
				switch($oResponse->content) {
					case /Your command request was successfully submitted to Nagios for processing/ {
						
						# Save the id of the just scheduled downtime
						if($storeDowntimeIds == 1) {
							saveDowntimeId();
						}
						
						print "OK: Downtime was submited successfully\n";
						exit(0);
					}
					case /Sorry, but you are not authorized to commit the specified command\./ {
						print "ERROR: Maybe not authorized or wrong host- or servicename\n";
						exit(1);
					}
					case /Author was not entered/ {
						print "ERROR: No Author entered, define Author in \$nagiosUser var\n";
						exit(1);
					}
					else {
						print "ERROR: Some undefined error occured, turn debug mode on to view what happened\n";
						exit(1);
					}
				}
			}
			case 3 {
				print "ERROR: HTTP Response code 3xx says \"moved url\" (".$oResponse->code.")\n";
				exit(1);
			}
			case 4 {
				print "ERROR: HTTP Response code 4xx says \"client error\" (".$oResponse->code.")\n";
				print "Hint: This could be caused by wrong auth credentials and/or datetime settings in this script\n";
				exit(1);
			}
			case 5 {
				print "ERROR: HTTP Response code 5xx says \"server error\" (".$oResponse->code.")\n";
				exit(1);
			}
			else {
				print "ERROR: HTTP Response code unhandled by script (".$oResponse->code.")\n";
				exit(1);
			}
		}
	}
	case 'del' {
		# Delete the last scheduled downtime
		# ##########################################################################
		
		if($storeDowntimeIds != 1) {
			print "ERROR: Unable to remove a downtime. The storingDowntimeIds option is set to disabled.\n";
			exit(1);
		}
		
		# Read all internal downtime ids for this host/service
		my @downtimes = sort({ $b <=> $a } @{getDowntimeIds()});
		
		# Only proceed when downtimes found
		if($#downtimes >= 0) {
			# Get the nagios downtime id for the last scheduled downtime
			my $nagiosDowntimeId = getNagiosDowntimeId($downtimes[0]);
			
			if($nagiosDowntimeId ne "") {
				deleteDowntime($nagiosDowntimeId);
				
				# Delete internal downtime id from downtime file
				delDowntimeId($downtimes[0]);
			} else {
				print "ERROR: Unable to remove the downtime. Nagios downtime not found. Maybe already deleted? Or not scheduled yet?\n";
				exit(1);
			}
		} else {
			print "ERROR: Unable to remove a downtime. No previously scheduled downtime found.\n";
			exit(1);
		}
	}
	else {
		print "ERROR: Some undefined error occured, turn debug mode on to view what happened\n";
		exit(1);
	}
}

# Regular end of script
# ##############################################################################

# #############################################################
# Subs
# #############################################################

sub delDowntimeId {
	my $internalId = shift;
	
	my $file = $downtimePath.'/';
	if($downtimeType == 1) {
		$file .= $hostname.'.txt';
	} else {
		$file .= $hostname.'-'.$service.'.txt';
	}
	
	if(-f $file) {
		if(open(IN, "<", $file)) {
			my @contents = <IN>;
			close(IN);
			
			@contents = grep { !/^$internalId$/i } @contents;
			
			if(open(OUT, ">", $file)) {
				print OUT @contents;
				close OUT;
			}
		}
	}
}

sub getDowntimeIds {
	my @arr = ();
	
	my $file = $downtimePath.'/';
	if($downtimeType == 1) {
		$file .= $hostname.'.txt';
	} else {
		$file .= $hostname.'-'.$service.'.txt';
	}
	
	if(-f $file) {
		if(open(DAT, "<".$file)) {
			while(my $line = <DAT>) {
				# Do some validation
				if($line =~ m/[0-9]+/i) {
					push(@arr, $line);
				}
			}
			
			close(DAT); 
		} else {
			print "ERROR: Could not open temporary file (".$file.")\n";
			exit(1);
		}
	}
	
	return \@arr;
}

sub saveDowntimeId {
	my $file = $downtimePath.'/';
	if($downtimeType == 1) {
		$file .= $hostname.'.txt';
	} else {
		$file .= $hostname.'-'.$service.'.txt';
	}

	if(open(DAT, ">>".$file)) {
		print DAT "\n$downtimeId";
		close(DAT); 
	} else {
		print "ERROR: Could not write downtime to temporary file (".$file.")\n";
		exit(1);
	}
}

sub getNagiosDowntimeId {
	my $internalId = shift;
	
	# Get all downtimes
	my @aDowntimes = @{getAllDowntimes()};

	# Filter the just scheduled downtime
	for my $i ( 0 .. $#aDowntimes ) {
		# Matching by:
		#  - internal id in comment field
		#  - triggerId: N/A
		if($aDowntimes[$i]{'triggerId'} eq 'N/A' && $aDowntimes[$i]{'comment'} =~ m/\(ID:$internalId\)/) {
			
			if($debug == 1) {
				print "Found matching downtime: ".$aDowntimes[$i]{'host'}." ".$aDowntimes[$i]{'service'}." ".$aDowntimes[$i]{'entryTime'}." ".$aDowntimes[$i]{'downtimeId'}."\n";
			}
			
			return $aDowntimes[$i]{'downtimeId'};
		}
	}
	
	return "";
}

sub deleteDowntime {
	my $nagiosDowntimeId = shift;
	
	if($nagiosDowntimeId eq "") {
		print "ERROR: Unable to delete downtime. Nagios Downtime ID not given\n";
		exit(1);
	}
	
	my $url = $nagiosWebProto . "://" . $nagiosWebServer . ":" . $nagiosWebPort . $nagiosCgiPath . "/cmd.cgi?cmd_typ=78&cmd_mod=2&down_id=".$nagiosDowntimeId."&btnSubmit=Commit";
	my $oResponse;
	
	if($debug == 1) {
		print "HTTP-GET: " . $url;
	}
	
	# Send the get request to the web server
	$oResponse = $oBrowser->get($url);

	if($debug == 1) {
		print "HTTP-Response: " . $oResponse->content;
	}
	
	# Handle response code, not in detail, only first char
	switch(substr($oResponse->code,0,1)) {
		# 2xx response code is OK
		case 2 {
			# Do some basic handling with the response content
			switch($oResponse->content) {
				case /Your command request was successfully submitted to Nagios for processing/ {
					
					print "OK: Downtime (ID: ".$nagiosDowntimeId.") has been deleted\n";
					exit(0);
				}
				case /Sorry, but you are not authorized to commit the specified command\./ {
					print "ERROR: Maybe not authorized or wrong host- or servicename\n";
					exit(1);
				}
				case /Author was not entered/ {
					print "ERROR: No Author entered, define Author in \$nagiosUser var\n";
					exit(1);
				}
				else {
					print "ERROR: Some undefined error occured, turn debug mode on to view what happened\n";
					exit(1);
				}
			}
		}
		case 3 {
			print "ERROR: HTTP Response code 3xx says \"moved url\" (".$oResponse->code.")\n";
			exit(1);
		}
		case 4 {
			print "ERROR: HTTP Response code 4xx says \"client error\" (".$oResponse->code.")\n";
			print "Hint: This could be caused by wrong auth credentials and/or datetime settings in this script\n";
			exit(1);
		}
		case 5 {
			print "ERROR: HTTP Response code 5xx says \"server error\" (".$oResponse->code.")\n";
			exit(1);
		}
		else {
			print "ERROR: HTTP Response code unhandled by script (".$oResponse->code.")\n";
			exit(1);
		}
	}
}

sub getAllDowntimes {
	my @arr = ();
	my $url;
	my $oResponse;
	
	# Url to downtime page
	$url = $nagiosWebProto . "://" . $nagiosWebServer . ":" . $nagiosWebPort . $nagiosCgiPath . "/extinfo.cgi?type=6";

	if($debug == 1) {
		print "HTTP-GET: " . $url;
	}
	
	# Fetch information via HTTP-GET
  $oResponse = $oBrowser->get($nagiosWebProto . "://" . $nagiosWebServer . ":" . $nagiosWebPort . $nagiosCgiPath . "/extinfo.cgi?type=6");

	if($debug == 1) {
		print "HTTP-Response: " . $oResponse->content;
	}

	# Parse all downtimes to an array
	my $lineType = '';
	foreach my $line (split(/\n/, $oResponse->content)) {
		# Filter only downtime lines
		if($line =~ m/CLASS=\'downtime(Odd|Even)\'/) {
			my $lineType = 'downtime' . $1;
			if($line =~ m/<tr\sCLASS=\'$lineType\'><td\sCLASS=\'$lineType\'><A\sHREF=\'extinfo\.cgi\?type=1&host=([^\']+)\'>[^<]+<\/A><\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td>/i) {
				# Host downtime:
				# <tr CLASS='downtimeEven'><td CLASS='downtimeEven'><A HREF='extinfo.cgi?type=1&host=dev.nagvis.org'>dev.nagvis.org</A></td><td CLASS='downtimeEven'>10-13-2009 09:15:35</td><td CLASS='downtimeEven'>Nagios Admin</td><td CLASS='downtimeEven'>Perl Downtime-Script</td><td CLASS='downtimeEven'>01-10-2010 09:15:35</td><td CLASS='downtimeEven'>01-10-2010 09:25:35</td><td CLASS='downtimeEven'>Fixed</td><td CLASS='downtimeEven'>0d 0h 10m 0s</td><td CLASS='downtimeEven'>9</td><td CLASS='downtimeEven'>N/A</td>
				
				if($debug == 1) {
					print "Found host downtime:\n";
					print "Host: ".$1." EntryTime: ".$2." User: ".$3." Comment: ".$4." Start: ".$5." End: ".$6." Type: ".$7." Duration: ".$8." DowntimeID: ".$9." TriggerID: ".$10."\n";
				}

				push @arr, { host => $1, service => '', entryTime => $2, user => $3, comment => $4, start => $5, end => $6, type => $7, duration => $8, downtimeId => $9, triggerId => $10 };
			} elsif($line =~ m/<tr\sCLASS=\'$lineType\'><td\sCLASS=\'$lineType\'><A\sHREF=\'extinfo\.cgi\?type=1&host=([^\']+)\'>[^<]+<\/A><\/td><td\sCLASS=\'$lineType\'><A\sHREF=\'extinfo\.cgi\?type=2&host=[^\']+&service=([^\']+)\'>[^<]+<\/A><\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td><td\sCLASS=\'$lineType\'>([^<]+)<\/td>/i) {
				# Service downtime:
				# <tr CLASS='downtimeEven'><td CLASS='downtimeEven'><A HREF='extinfo.cgi?type=1&host=dev.nagvis.org'>dev.nagvis.org</A></td><td CLASS='downtimeEven'><A HREF='extinfo.cgi?type=2&host=dev.nagvis.org&service=HTTP'>HTTP</A></td><td CLASS='downtimeEven'>10-13-2009 10:28:30</td><td CLASS='downtimeEven'>Nagios Admin</td><td CLASS='downtimeEven'>test</td><td CLASS='downtimeEven'>10-13-2009 10:28:11</td><td CLASS='downtimeEven'>10-13-2009 12:28:11</td><td CLASS='downtimeEven'>Fixed</td><td CLASS='downtimeEven'>0d 2h 0m 0s</td><td CLASS='downtimeEven'>145</td><td CLASS='downtimeEven'>N/A</td>
				
				if($debug == 1) {
          print "Found service downtime:\n";
					print "Host: ".$1." Service: ".$2." EntryTime: ".$3." User: ".$4." Comment: ".$5." Start: ".$6." End: ".$7." Type: ".$8." Duration: ".$9." DowntimeID: ".$10." TriggerID: ".$11."\n";
        }
				
				push @arr, { host => $1, service => $2, entryTime => $3, user => $4, comment => $5, start => $6, end => $7, type => $8, duration => $9, downtimeId => $10, triggerId => $11 };
			}
		}
	}
	
	# return array of hashes
	return \@arr;
}

sub about {
		print <<'ABOUT';
Usage:
  nagios_downtime [-m add] [-H <hostname>] [-s <service>] [-t <minutes>] 
                  [-S <webserver>] [-p <cgi-bin-path>] [-u <username>] 
                  [-p <password>] [-d]
  nagios_downtime -m del [-H <hostname>] [-s <service>] [-S <webserver>]
                  [-p <cgi-bin-path>] [-u <username>] [-p <password>] [-d]
  nagios_downtime -h

Nagios Downtime Script by Lars Michelsen <lars@vertical-visions.de>
Sends a HTTP(S) request to the nagios cgis to add a downtime for a host or 
service. Since version 0.5 the script can remove downtimes too when being
called in "del" mode.

Parameters:
 -m, --mode       Mode to run the script in (Available: add, del)
 
 -H, --hostname   Name of the host the downtime should be scheduled for.
                  Important: The name must be same as in Nagios.
 -s, --service    Name of the service the downtime should be scheduled for.
                  Important: The name must be same as in Nagios. 
                  When empty or not set a host downtime is being submited.
 -t, --downtime   Duration of the fixed downtime in minutes
 -c, --comment    Comment for the downtime
 
 -S, --server     Nagios Webserver address (IP or DNS)
 -p, --path       Web path to Nagios cgi-bin (Default: /nagios/cgi-bin)
 -u, --user       Usernate to be used for accessing the CGIs
 -P, --password   Password for accessing the CGIs
 
 -d, --debug      Enable debug mode
 -h, --help       Show this message

If you call nagios_downtime without parameters the script takes the default options which are
hardcoded in the script.

ABOUT
}

sub gettime {
	my $timestamp;
	$timestamp = shift;

	if($timestamp eq "") {
			$timestamp = time;
	}

	my ($sec,$min,$hour,$mday,$month,$year,$wday,$yday,$isdst) = localtime($timestamp);
	# correct values
	$year += 1900;
	$month += 1;

	# add leading 0 to values lower than 10
	$month = $month < 10 ? $month = "0".$month : $month;
	$mday = $mday < 10 ? $mday = "0".$mday : $mday;
	$hour = $hour < 10 ? $hour = "0".$hour : $hour;
	$min = $min < 10 ? $min = "0".$min : $min;
	$sec = $sec < 10 ? $sec = "0".$sec : $sec;

	switch ($nagiosDateFormat) {
		case "euro" {
			return $mday."-".$month."-".$year." ".$hour.":".$min.":".$sec;
		}
		case "us" {
			return $month."-".$mday."-".$year." ".$hour.":".$min.":".$sec;
		}
		case "iso8601" {
			return $year."-".$month."-".$mday." ".$hour.":".$min.":".$sec;
		}
		case "strict-iso8601" {
			return $year."-".$month."-".$mday."T".$hour.":".$min.":".$sec;
		}
		else {
			print "ERROR: No valid date format given in \$nagiosDateFormat";
			exit(1);
		}
	}
}

# #############################################################
# EOF
# #############################################################
